{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/metadata.ts","webpack:///./src/index.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","metadata","version","gitHash","lastModified","__webpack_exports__","src_Fullscreen","Fullscreen","ele","this","tab","fss","fullscreenEnabled","fullscreenElement","onfullscreenchange","onfullscreenerror","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","document","documentElement","doc","ownerDocument","checkoutFullscreen","length","cfs","Boolean","handler","addEventListener","type","listener","options","removeEventListener","toggleFullscreen","forceExit"],"mappings":"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","file":"fullscreen.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","interface ProjectMetadata {\r\n    mode: \"none\" | \"development\" | \"production\";\r\n    name: string;\r\n    gitHash: string;\r\n    version: string;\r\n    lastModified: string;\r\n}\r\n\r\n// @ts-ignore (from webpack.DefinePlugin)\r\nexport const metadata: ProjectMetadata = __X_METADATA__;\r\n","/**\n * @summary TypeScript Version\n */\n\ndeclare global {\n    interface Document {\n        readonly webkitFullscreenEnabled: Document[\"fullscreenEnabled\"];\n        readonly mozFullScreenEnabled: Document[\"fullscreenEnabled\"];\n        readonly msFullscreenEnabled: Document[\"fullscreenEnabled\"];\n        readonly webkitFullscreenElement: Document[\"fullscreenElement\"];\n        readonly mozFullScreenElement: Document[\"fullscreenElement\"];\n        readonly msFullscreenElement: Document[\"fullscreenElement\"];\n        onwebkitfullscreenchange: Document[\"onfullscreenchange\"];\n        onmozfullscreenchange: Document[\"onfullscreenchange\"];\n        onmsfullscreenchange: Document[\"onfullscreenchange\"];\n        onwebkitfullscreenerror: Document[\"onfullscreenerror\"];\n        onmozfullscreenerror: Document[\"onfullscreenerror\"];\n        onmsfullscreenerror: Document[\"onfullscreenerror\"];\n        webkitExitFullscreen(): void;\n        mozCancelFullScreen(): void;\n        msExitFullscreen(): void;\n    }\n    interface Element {\n        webkitRequestFullscreen(): void;\n        mozRequestFullScreen(): void;\n        msRequestFullscreen(): void;\n    }\n}\n\nimport { metadata } from \"./metadata\";\n\nexport interface FullscreenAPIMapping {\n    fullscreenEnabled: \"fullscreenEnabled\" | \"webkitFullscreenEnabled\" | \"mozFullScreenEnabled\" | \"msFullscreenEnabled\";\n    fullscreenElement: \"fullscreenElement\" | \"webkitFullscreenElement\" | \"mozFullScreenElement\" | \"msFullscreenElement\";\n    onfullscreenchange:\n        | \"onfullscreenchange\"\n        | \"onwebkitfullscreenchange\"\n        | \"onmozfullscreenchange\"\n        | \"onmsfullscreenchange\";\n    onfullscreenerror: \"onfullscreenerror\" | \"onwebkitfullscreenerror\" | \"onmozfullscreenerror\" | \"onmsfullscreenerror\";\n    requestFullscreen: \"requestFullscreen\" | \"webkitRequestFullscreen\" | \"mozRequestFullScreen\" | \"msRequestFullscreen\";\n    exitFullscreen: \"exitFullscreen\" | \"webkitExitFullscreen\" | \"mozCancelFullScreen\" | \"msExitFullscreen\";\n    fullscreenchange: \"fullscreenchange\" | \"webkitfullscreenchange\" | \"mozfullscreenchange\" | \"MSFullscreenChange\";\n    fullscreenerror: \"fullscreenerror\" | \"webkitfullscreenerror\" | \"mozfullscreenerror\" | \"MSFullscreenError\";\n}\n\nexport type FullscreenEventType = \"fullscreenchange\" | \"fullscreenerror\";\n\nexport class Fullscreen {\n    private readonly ele: Element;\n    private readonly doc: Document;\n    private tab = -1;\n    private cfs: FullscreenAPIMapping;\n    private readonly fss = [\n        {\n            fullscreenEnabled: \"fullscreenEnabled\",\n            fullscreenElement: \"fullscreenElement\",\n            onfullscreenchange: \"onfullscreenchange\",\n            onfullscreenerror: \"onfullscreenerror\",\n            requestFullscreen: \"requestFullscreen\",\n            exitFullscreen: \"exitFullscreen\",\n            fullscreenchange: \"fullscreenchange\",\n            fullscreenerror: \"fullscreenerror\"\n        },\n        {\n            fullscreenEnabled: \"webkitFullscreenEnabled\",\n            fullscreenElement: \"webkitFullscreenElement\",\n            onfullscreenchange: \"onwebkitfullscreenchange\",\n            onfullscreenerror: \"onwebkitfullscreenerror\",\n            requestFullscreen: \"webkitRequestFullscreen\",\n            exitFullscreen: \"webkitExitFullscreen\",\n            fullscreenchange: \"webkitfullscreenchange\",\n            fullscreenerror: \"webkitfullscreenerror\"\n        },\n        {\n            fullscreenEnabled: \"mozFullScreenEnabled\",\n            fullscreenElement: \"mozFullScreenElement\",\n            onfullscreenchange: \"onmozfullscreenchange\",\n            onfullscreenerror: \"onmozfullscreenerror\",\n            requestFullscreen: \"mozRequestFullScreen\",\n            exitFullscreen: \"mozCancelFullScreen\",\n            fullscreenchange: \"mozfullscreenchange\",\n            fullscreenerror: \"mozfullscreenerror\"\n        },\n        {\n            fullscreenEnabled: \"msFullscreenEnabled\",\n            fullscreenElement: \"msFullscreenElement\",\n            onfullscreenchange: \"onmsfullscreenchange\",\n            onfullscreenerror: \"onmsfullscreenerror\",\n            requestFullscreen: \"msRequestFullscreen\",\n            exitFullscreen: \"msExitFullscreen\",\n            fullscreenchange: \"MSFullscreenChange\",\n            fullscreenerror: \"MSFullscreenError\"\n        }\n    ];\n\n    constructor(ele?: Element) {\n        this.ele = ele || document.documentElement;\n        this.doc = this.ele.ownerDocument;\n        this.checkoutFullscreen();\n    }\n\n    static get metadata() {\n        return metadata;\n    }\n\n    private checkoutFullscreen() {\n        for (let i = 0; i < this.fss.length; i++) {\n            if (this.fss[i].fullscreenEnabled in this.doc) {\n                this.tab = i;\n                break;\n            }\n        }\n        this.cfs = <FullscreenAPIMapping>this.fss[this.tab] || null;\n    }\n\n    get fullscreenEnabled(): boolean {\n        if (this.cfs) {\n            return Boolean(this.doc[this.cfs.fullscreenEnabled]);\n        } else {\n            return false;\n        }\n    }\n\n    get fullscreenElement(): Element | null {\n        if (this.cfs) {\n            return this.doc[this.cfs.fullscreenElement] || null;\n        } else {\n            return null;\n        }\n    }\n\n    get onfullscreenchange() {\n        if (this.cfs) {\n            return this.doc[this.cfs.onfullscreenchange];\n        } else {\n            return null;\n        }\n    }\n\n    set onfullscreenchange(handler: Document[\"onfullscreenchange\"]) {\n        if (this.cfs) {\n            this.doc[this.cfs.onfullscreenchange] = handler;\n        }\n    }\n\n    get onfullscreenerror() {\n        if (this.cfs) {\n            return this.doc[this.cfs.onfullscreenerror];\n        } else {\n            return null;\n        }\n    }\n\n    set onfullscreenerror(handler: Document[\"onfullscreenerror\"]) {\n        if (this.cfs) {\n            this.doc[this.cfs.onfullscreenerror] = handler;\n        }\n    }\n\n    requestFullscreen() {\n        if (this.cfs) {\n            this.ele[this.cfs.requestFullscreen]();\n        }\n    }\n\n    exitFullscreen() {\n        if (this.cfs) {\n            this.doc[this.cfs.exitFullscreen]();\n        }\n    }\n\n    addEventListener(\n        type: FullscreenEventType,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions\n    ) {\n        if (type === \"fullscreenchange\" || type === \"fullscreenerror\") {\n            if (this.cfs) {\n                this.doc.addEventListener(this.cfs[type], listener, options);\n            }\n        }\n    }\n\n    removeEventListener(\n        type: FullscreenEventType,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions\n    ) {\n        if (type === \"fullscreenchange\" || type === \"fullscreenerror\") {\n            if (this.cfs) {\n                this.doc.removeEventListener(this.cfs[type], listener, options);\n            }\n        }\n    }\n\n    toggleFullscreen(forceExit?: boolean) {\n        if (forceExit) {\n            if (this.fullscreenElement === this.ele) {\n                this.exitFullscreen();\n            }\n        } else {\n            if (this.fullscreenElement === this.ele) {\n                this.exitFullscreen();\n            } else {\n                this.requestFullscreen();\n            }\n        }\n    }\n\n    get fullscreenMapping(): FullscreenAPIMapping | null {\n        return this.cfs;\n    }\n\n    get currentElement(): Element {\n        return this.ele;\n    }\n}\n"],"sourceRoot":""}