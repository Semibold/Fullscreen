{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/metadata.ts","webpack:///./src/index.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","metadata","version","envMode","gitHash","lastCompiled","__webpack_exports__","src_Fullscreen","Fullscreen","ele","this","cfs","fss","fullscreenEnabled","fullscreenElement","onfullscreenchange","onfullscreenerror","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","doc","ownerDocument","document","win","defaultView","length","Boolean","getBrowsingContextPromise","maybePromise","resolve","reject","options","_this","Promise_1","p1","onchange","e","currentElement","removeEventListener","onerror","removeListener","addEventListener","addListener","p2","then","catch","isBrowsingContext","Promise_2","callback","type","listener"],"mappings":"CAAA,SAAAA,EAAAC,GACA,oBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,SACA,sBAAAG,eAAAC,IACAD,OAAA,GAAAH,OACA,CACA,IAAAK,EAAAL,IACA,QAAAM,KAAAD,GAAA,iBAAAJ,gBAAAF,GAAAO,GAAAD,EAAAC,IAPA,CASCC,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,GAAA,CACAJ,EAAAI,EACAC,GAAA,EACAV,QAAA,IAUA,OANAW,EAAAF,GAAAG,KAAAX,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAS,GAAA,EAGAT,EAAAD,QA0DA,OArDAQ,EAAAK,EAAAF,EAGAH,EAAAM,EAAAP,EAGAC,EAAAO,EAAA,SAAAf,EAAAgB,EAAAC,GACAT,EAAAU,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CT,EAAAe,EAAA,SAAAvB,GACA,oBAAAwB,eAAAC,aACAN,OAAAC,eAAApB,EAAAwB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAApB,EAAA,cAAiD0B,OAAA,KAQjDlB,EAAAmB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAlB,EAAAkB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAvB,EAAAe,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAlB,EAAAO,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAtB,EAAA0B,EAAA,SAAAjC,GACA,IAAAgB,EAAAhB,KAAA4B,WACA,WAA2B,OAAA5B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAO,EAAAE,EAAA,IAAAA,GACAA,GAIAT,EAAAU,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD5B,EAAA+B,EAAA,GAIA/B,IAAAgC,EAAA,yCCzEO,IAAMC,EAA4B,CAAAzB,KAAA,uBAAA0B,QAAA,QAAAC,QAAA,aAAAC,QAAA,UAAAC,aAAA,4BCTzCrC,EAAAO,EAAA+B,EAAA,+BAAAC,IAuBA,IAAAA,EAAA,WAgDI,SAAAC,EAAYC,GA5CKC,KAAAC,IAAmC,KACnCD,KAAAE,IAAM,CACnB,CACIC,kBAAmB,oBACnBC,kBAAmB,oBACnBC,mBAAoB,qBACpBC,kBAAmB,oBACnBC,kBAAmB,oBACnBC,eAAgB,iBAChBC,iBAAkB,mBAClBC,gBAAiB,mBAErB,CACIP,kBAAmB,0BACnBC,kBAAmB,0BACnBC,mBAAoB,2BACpBC,kBAAmB,0BACnBC,kBAAmB,0BACnBC,eAAgB,uBAChBC,iBAAkB,yBAClBC,gBAAiB,yBAErB,CACIP,kBAAmB,uBACnBC,kBAAmB,uBACnBC,mBAAoB,wBACpBC,kBAAmB,uBACnBC,kBAAmB,uBACnBC,eAAgB,sBAChBC,iBAAkB,sBAClBC,gBAAiB,sBAErB,CACIP,kBAAmB,sBACnBC,kBAAmB,sBACnBC,mBAAoB,uBACpBC,kBAAmB,sBACnBC,kBAAmB,sBACnBC,eAAgB,mBAChBC,iBAAkB,qBAClBC,gBAAiB,sBAKrBV,KAAKD,IAAMA,EACXC,KAAKW,IAAMX,KAAKD,IAAIa,eAAiBC,SACrCb,KAAKc,IAAMd,KAAKW,IAAII,aAAe3D,OACnC,IAAK,IAAID,EAAI,EAAGA,EAAI6C,KAAKE,IAAIc,OAAQ7D,IACjC,GAAI6C,KAAKE,IAAI/C,GAAGgD,qBAAqBH,KAAKW,IAAK,CAC3CX,KAAKC,IAA4BD,KAAKE,IAAI/C,GAC1C,OAqPhB,OAhPIc,OAAAC,eAAW4B,EAAA,WAAQ,KAAnB,WACI,OAAOP,mCAGXtB,OAAAC,eAAI4B,EAAAX,UAAA,iBAAc,KAAlB,WACI,OAAOa,KAAKD,qCAGhB9B,OAAAC,eAAI4B,EAAAX,UAAA,oBAAiB,KAArB,WACI,OAAOa,KAAKC,qCAGhBhC,OAAAC,eAAI4B,EAAAX,UAAA,oBAAiB,KAArB,WACI,QAAIa,KAAKC,KACEgB,QAAQjB,KAAKW,IAAIX,KAAKC,IAAIE,qDAMzClC,OAAAC,eAAI4B,EAAAX,UAAA,oBAAiB,KAArB,WACI,OAAIa,KAAKC,KACED,KAAKW,IAAIX,KAAKC,IAAIG,oBAElB,sCAIfN,EAAAX,UAAA+B,0BAAA,WACI,IAAMC,EAAenB,KAAKc,IAAa,QACvC,MAC4B,mBAAjBK,GACyB,mBAAzBA,EAAaC,SACW,mBAAxBD,EAAaE,OAEbF,EAEA,MAIfrB,EAAAX,UAAAoB,kBAAA,SAAkBe,GAAlB,IAAAC,EAAAvB,KACI,GAAIA,KAAKC,IAAK,CAEV,IAAMuB,EAAUxB,KAAKkB,4BACrB,GAAIM,EAAS,CACT,IAAMC,EAAoB,IAAID,EAAQ,SAACJ,EAASC,GAC5C,IAAMK,EAAW,SAACC,GACVJ,EAAKnB,oBAAsBmB,EAAKK,iBAChCL,EAAKM,oBAAoB,mBAAoBH,GAAU,GACvDH,EAAKM,oBAAoB,kBAAmBC,GAAS,GACrDP,EAAKQ,eAAe,mBAAoBL,GACxCH,EAAKQ,eAAe,kBAAmBD,GACvCV,MAGFU,EAAU,SAACH,GACTJ,EAAKnB,oBAAsBmB,EAAKK,iBAChCL,EAAKM,oBAAoB,mBAAoBH,GAAU,GACvDH,EAAKM,oBAAoB,kBAAmBC,GAAS,GACrDP,EAAKQ,eAAe,mBAAoBL,GACxCH,EAAKQ,eAAe,kBAAmBD,GACvCT,MAGRE,EAAKS,iBAAiB,mBAAoBN,GAAU,GACpDH,EAAKS,iBAAiB,kBAAmBF,GAAS,GAClDP,EAAKU,YAAY,mBAAoBP,GACrCH,EAAKU,YAAY,kBAAmBH,KAElCI,EAAKlC,KAAKD,IAAIC,KAAKC,IAAIM,mBAAmBe,GAChD,OAAIY,GAAyB,mBAAZA,EAAGC,MAA2C,mBAAbD,EAAGE,MAC1CF,EAEAT,EAGX,OAAOzB,KAAKD,IAAIC,KAAKC,IAAIM,mBAAmBe,KAKxDxB,EAAAX,UAAAqB,eAAA,SAAe6B,GAAf,IAAAd,EAAAvB,KACI,GAAIA,KAAKC,IAAK,CAEV,IAAMqC,EAAUtC,KAAKkB,4BACrB,GAAIoB,EAAS,CACT,GAAID,GAAqBrC,KAAKI,oBAAsBJ,KAAKD,IAAK,CAC1D,IAAM0B,EAAoB,IAAIa,EAAQ,SAAClB,EAASC,GAC5C,IAAMK,EAAW,SAACC,IACVU,GAAqBd,EAAKnB,oBAAsBmB,EAAKK,kBACrDL,EAAKM,oBAAoB,mBAAoBH,GAAU,GACvDH,EAAKM,oBAAoB,kBAAmBC,GAAS,GACrDP,EAAKQ,eAAe,mBAAoBL,GACxCH,EAAKQ,eAAe,kBAAmBD,GACvCV,MAGFU,EAAU,SAACH,IACTU,GAAqBd,EAAKnB,oBAAsBmB,EAAKK,kBACrDL,EAAKM,oBAAoB,mBAAoBH,GAAU,GACvDH,EAAKM,oBAAoB,kBAAmBC,GAAS,GACrDP,EAAKQ,eAAe,mBAAoBL,GACxCH,EAAKQ,eAAe,kBAAmBD,GACvCT,MAGRE,EAAKS,iBAAiB,mBAAoBN,GAAU,GACpDH,EAAKS,iBAAiB,kBAAmBF,GAAS,GAClDP,EAAKU,YAAY,mBAAoBP,GACrCH,EAAKU,YAAY,kBAAmBH,KAElCI,EAAKlC,KAAKW,IAAIX,KAAKC,IAAIO,kBAC7B,OAAI0B,GAAyB,mBAAZA,EAAGC,MAA2C,mBAAbD,EAAGE,MAC1CF,EAEAT,EAGX,OAAOa,EAAQjB,OACX,IAAIrB,KAAKc,IAAe,UACpB,2GAKZ,GAAIuB,GAAqBrC,KAAKI,oBAAsBJ,KAAKD,IACrD,OAAOC,KAAKW,IAAIX,KAAKC,IAAIO,oBAUzCvC,OAAAC,eAAI4B,EAAAX,UAAA,qBAAkB,KAAtB,WACI,OAAIa,KAAKC,IACED,KAAKD,IAAIC,KAAKC,IAAII,oBAElB,UAQf,SAAuBkC,GACfvC,KAAKC,MACLD,KAAKD,IAAIC,KAAKC,IAAII,oBAAsBkC,oCAQhDtE,OAAAC,eAAI4B,EAAAX,UAAA,oBAAiB,KAArB,WACI,OAAIa,KAAKC,IACED,KAAKD,IAAIC,KAAKC,IAAIK,mBAElB,UAQf,SAAsBiC,GACdvC,KAAKC,MACLD,KAAKD,IAAIC,KAAKC,IAAIK,mBAAqBiC,oCAS/CzC,EAAAX,UAAA6C,iBAAA,SACIQ,EACAC,EACAnB,GAEItB,KAAKC,MACQ,qBAATuC,GAAwC,oBAATA,GAC/BxC,KAAKD,IAAIiC,iBAAiBhC,KAAKC,IAAIuC,GAAOC,EAAUnB,KAUhExB,EAAAX,UAAA0C,oBAAA,SACIW,EACAC,EACAnB,GAEItB,KAAKC,MACQ,qBAATuC,GAAwC,oBAATA,GAC/BxC,KAAKD,IAAI8B,oBAAoB7B,KAAKC,IAAIuC,GAAOC,EAAUnB,KAQnExB,EAAAX,UAAA8C,YAAA,SACIO,EACAC,EACAnB,GAEItB,KAAKC,MACQ,qBAATuC,GAAwC,oBAATA,GAC/BxC,KAAKW,IAAIqB,iBAAiBhC,KAAKC,IAAIuC,GAAOC,EAAUnB,KAQhExB,EAAAX,UAAA4C,eAAA,SACIS,EACAC,EACAnB,GAEItB,KAAKC,MACQ,qBAATuC,GAAwC,oBAATA,GAC/BxC,KAAKW,IAAIkB,oBAAoB7B,KAAKC,IAAIuC,GAAOC,EAAUnB,KAIvExB,EA5SA","file":"fullscreen.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","interface ProjectMetadata {\n    name: string;\n    version: string;\n    envMode: \"none\" | \"development\" | \"production\";\n    gitHash: string;\n    lastCompiled: string;\n}\n\n// @ts-ignore (from webpack.DefinePlugin)\nexport const metadata: ProjectMetadata = __X_METADATA__;\n","import { metadata } from \"./metadata\";\n\nexport interface FullscreenOptions {\n    navigationUI: \"auto\" | \"show\" | \"hide\";\n}\n\nexport interface FullscreenAPIMapping {\n    fullscreenEnabled: \"fullscreenEnabled\" | \"webkitFullscreenEnabled\" | \"mozFullScreenEnabled\" | \"msFullscreenEnabled\";\n    fullscreenElement: \"fullscreenElement\" | \"webkitFullscreenElement\" | \"mozFullScreenElement\" | \"msFullscreenElement\";\n    onfullscreenchange:\n        | \"onfullscreenchange\"\n        | \"onwebkitfullscreenchange\"\n        | \"onmozfullscreenchange\"\n        | \"onmsfullscreenchange\";\n    onfullscreenerror: \"onfullscreenerror\" | \"onwebkitfullscreenerror\" | \"onmozfullscreenerror\" | \"onmsfullscreenerror\";\n    requestFullscreen: \"requestFullscreen\" | \"webkitRequestFullscreen\" | \"mozRequestFullScreen\" | \"msRequestFullscreen\";\n    exitFullscreen: \"exitFullscreen\" | \"webkitExitFullscreen\" | \"mozCancelFullScreen\" | \"msExitFullscreen\";\n    fullscreenchange: \"fullscreenchange\" | \"webkitfullscreenchange\" | \"mozfullscreenchange\" | \"MSFullscreenChange\";\n    fullscreenerror: \"fullscreenerror\" | \"webkitfullscreenerror\" | \"mozfullscreenerror\" | \"MSFullscreenError\";\n}\n\nexport type FullscreenEventType = \"fullscreenchange\" | \"fullscreenerror\";\n\nexport class Fullscreen {\n    private readonly ele: Element;\n    private readonly doc: Document;\n    private readonly win: Window;\n    private readonly cfs: FullscreenAPIMapping | null = null;\n    private readonly fss = [\n        {\n            fullscreenEnabled: \"fullscreenEnabled\",\n            fullscreenElement: \"fullscreenElement\",\n            onfullscreenchange: \"onfullscreenchange\",\n            onfullscreenerror: \"onfullscreenerror\",\n            requestFullscreen: \"requestFullscreen\",\n            exitFullscreen: \"exitFullscreen\",\n            fullscreenchange: \"fullscreenchange\",\n            fullscreenerror: \"fullscreenerror\",\n        },\n        {\n            fullscreenEnabled: \"webkitFullscreenEnabled\",\n            fullscreenElement: \"webkitFullscreenElement\",\n            onfullscreenchange: \"onwebkitfullscreenchange\",\n            onfullscreenerror: \"onwebkitfullscreenerror\",\n            requestFullscreen: \"webkitRequestFullscreen\",\n            exitFullscreen: \"webkitExitFullscreen\",\n            fullscreenchange: \"webkitfullscreenchange\",\n            fullscreenerror: \"webkitfullscreenerror\",\n        },\n        {\n            fullscreenEnabled: \"mozFullScreenEnabled\",\n            fullscreenElement: \"mozFullScreenElement\",\n            onfullscreenchange: \"onmozfullscreenchange\",\n            onfullscreenerror: \"onmozfullscreenerror\",\n            requestFullscreen: \"mozRequestFullScreen\",\n            exitFullscreen: \"mozCancelFullScreen\",\n            fullscreenchange: \"mozfullscreenchange\",\n            fullscreenerror: \"mozfullscreenerror\",\n        },\n        {\n            fullscreenEnabled: \"msFullscreenEnabled\",\n            fullscreenElement: \"msFullscreenElement\",\n            onfullscreenchange: \"onmsfullscreenchange\",\n            onfullscreenerror: \"onmsfullscreenerror\",\n            requestFullscreen: \"msRequestFullscreen\",\n            exitFullscreen: \"msExitFullscreen\",\n            fullscreenchange: \"MSFullscreenChange\",\n            fullscreenerror: \"MSFullscreenError\",\n        },\n    ];\n\n    constructor(ele: Element) {\n        this.ele = ele;\n        this.doc = this.ele.ownerDocument || document;\n        this.win = this.doc.defaultView || window;\n        for (let i = 0; i < this.fss.length; i++) {\n            if (this.fss[i].fullscreenEnabled in this.doc) {\n                this.cfs = <FullscreenAPIMapping>this.fss[i];\n                break;\n            }\n        }\n    }\n\n    static get metadata() {\n        return metadata;\n    }\n\n    get currentElement(): Element {\n        return this.ele;\n    }\n\n    get fullscreenMapping(): FullscreenAPIMapping | null {\n        return this.cfs;\n    }\n\n    get fullscreenEnabled(): boolean {\n        if (this.cfs) {\n            return Boolean(this.doc[this.cfs.fullscreenEnabled]);\n        } else {\n            return false;\n        }\n    }\n\n    get fullscreenElement(): Element | null {\n        if (this.cfs) {\n            return this.doc[this.cfs.fullscreenElement] || null;\n        } else {\n            return null;\n        }\n    }\n\n    getBrowsingContextPromise(): PromiseConstructor | null {\n        const maybePromise = this.win[\"Promise\"];\n        if (\n            typeof maybePromise === \"function\" &&\n            typeof maybePromise.resolve === \"function\" &&\n            typeof maybePromise.reject === \"function\"\n        ) {\n            return maybePromise;\n        } else {\n            return null;\n        }\n    }\n\n    requestFullscreen(options?: FullscreenOptions): Promise<void> | void {\n        if (this.cfs) {\n            // tslint:disable-next-line\n            const Promise = this.getBrowsingContextPromise();\n            if (Promise) {\n                const p1: Promise<void> = new Promise((resolve, reject) => {\n                    const onchange = (e: Event) => {\n                        if (this.fullscreenElement === this.currentElement) {\n                            this.removeEventListener(\"fullscreenchange\", onchange, true);\n                            this.removeEventListener(\"fullscreenerror\", onerror, true);\n                            this.removeListener(\"fullscreenchange\", onchange);\n                            this.removeListener(\"fullscreenerror\", onerror);\n                            resolve();\n                        }\n                    };\n                    const onerror = (e: Event) => {\n                        if (this.fullscreenElement !== this.currentElement) {\n                            this.removeEventListener(\"fullscreenchange\", onchange, true);\n                            this.removeEventListener(\"fullscreenerror\", onerror, true);\n                            this.removeListener(\"fullscreenchange\", onchange);\n                            this.removeListener(\"fullscreenerror\", onerror);\n                            reject(/* new Error(message)? */);\n                        }\n                    };\n                    this.addEventListener(\"fullscreenchange\", onchange, true);\n                    this.addEventListener(\"fullscreenerror\", onerror, true);\n                    this.addListener(\"fullscreenchange\", onchange);\n                    this.addListener(\"fullscreenerror\", onerror);\n                });\n                const p2 = this.ele[this.cfs.requestFullscreen](options);\n                if (p2 && typeof p2.then === \"function\" && typeof p2.catch === \"function\") {\n                    return p2;\n                } else {\n                    return p1;\n                }\n            } else {\n                return this.ele[this.cfs.requestFullscreen](options);\n            }\n        }\n    }\n\n    exitFullscreen(isBrowsingContext?: boolean): Promise<void> | void {\n        if (this.cfs) {\n            // tslint:disable-next-line\n            const Promise = this.getBrowsingContextPromise();\n            if (Promise) {\n                if (isBrowsingContext || this.fullscreenElement === this.ele) {\n                    const p1: Promise<void> = new Promise((resolve, reject) => {\n                        const onchange = (e: Event) => {\n                            if (isBrowsingContext || this.fullscreenElement !== this.currentElement) {\n                                this.removeEventListener(\"fullscreenchange\", onchange, true);\n                                this.removeEventListener(\"fullscreenerror\", onerror, true);\n                                this.removeListener(\"fullscreenchange\", onchange);\n                                this.removeListener(\"fullscreenerror\", onerror);\n                                resolve();\n                            }\n                        };\n                        const onerror = (e: Event) => {\n                            if (isBrowsingContext || this.fullscreenElement === this.currentElement) {\n                                this.removeEventListener(\"fullscreenchange\", onchange, true);\n                                this.removeEventListener(\"fullscreenerror\", onerror, true);\n                                this.removeListener(\"fullscreenchange\", onchange);\n                                this.removeListener(\"fullscreenerror\", onerror);\n                                reject(/* new Error(message)? */);\n                            }\n                        };\n                        this.addEventListener(\"fullscreenchange\", onchange, true);\n                        this.addEventListener(\"fullscreenerror\", onerror, true);\n                        this.addListener(\"fullscreenchange\", onchange);\n                        this.addListener(\"fullscreenerror\", onerror);\n                    });\n                    const p2 = this.doc[this.cfs.exitFullscreen]();\n                    if (p2 && typeof p2.then === \"function\" && typeof p2.catch === \"function\") {\n                        return p2;\n                    } else {\n                        return p1;\n                    }\n                } else {\n                    return Promise.reject(\n                        new this.win[\"TypeError\"](\n                            \"The document containing the element isn't fully active; that is, it's not the current active document.\",\n                        ),\n                    );\n                }\n            } else {\n                if (isBrowsingContext || this.fullscreenElement === this.ele) {\n                    return this.doc[this.cfs.exitFullscreen]();\n                }\n            }\n        }\n    }\n\n    /**\n     * @desc Modern APIs\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange#Browser_compatibility\n     */\n    get onfullscreenchange() {\n        if (this.cfs) {\n            return this.ele[this.cfs.onfullscreenchange];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @desc Modern APIs\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange#Browser_compatibility\n     */\n    set onfullscreenchange(callback: ((this: Element, ev: Event) => any) | null) {\n        if (this.cfs) {\n            this.ele[this.cfs.onfullscreenchange] = callback;\n        }\n    }\n\n    /**\n     * @desc Modern APIs\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror#Browser_compatibility\n     */\n    get onfullscreenerror() {\n        if (this.cfs) {\n            return this.ele[this.cfs.onfullscreenerror];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @desc Modern APIs\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror#Browser_compatibility\n     */\n    set onfullscreenerror(callback: ((this: Element, ev: Event) => any) | null) {\n        if (this.cfs) {\n            this.ele[this.cfs.onfullscreenerror] = callback;\n        }\n    }\n\n    /**\n     * @desc Modern APIs\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange#Browser_compatibility\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror#Browser_compatibility\n     */\n    addEventListener(\n        type: FullscreenEventType,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n    ) {\n        if (this.cfs) {\n            if (type === \"fullscreenchange\" || type === \"fullscreenerror\") {\n                this.ele.addEventListener(this.cfs[type], listener, options);\n            }\n        }\n    }\n\n    /**\n     * @desc Modern APIs\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange#Browser_compatibility\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror#Browser_compatibility\n     */\n    removeEventListener(\n        type: FullscreenEventType,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n    ) {\n        if (this.cfs) {\n            if (type === \"fullscreenchange\" || type === \"fullscreenerror\") {\n                this.ele.removeEventListener(this.cfs[type], listener, options);\n            }\n        }\n    }\n\n    /**\n     * @deprecated Use returned promise if BrowsingContextPromise is available.\n     */\n    addListener(\n        type: FullscreenEventType,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n    ) {\n        if (this.cfs) {\n            if (type === \"fullscreenchange\" || type === \"fullscreenerror\") {\n                this.doc.addEventListener(this.cfs[type], listener, options);\n            }\n        }\n    }\n\n    /**\n     * @deprecated Use returned promise if BrowsingContextPromise is available.\n     */\n    removeListener(\n        type: FullscreenEventType,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n    ) {\n        if (this.cfs) {\n            if (type === \"fullscreenchange\" || type === \"fullscreenerror\") {\n                this.doc.removeEventListener(this.cfs[type], listener, options);\n            }\n        }\n    }\n}\n"],"sourceRoot":""}